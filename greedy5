Wildcard Matching
#Time: O(M * N)
#Space: O(M * N)
class Solution:
    def isMatch(self, s: str, p: str) -> bool:
        @lru_cache(None)
        def dfs(i, j):
            if j == len(p):  # Reach full pattern
                return i == len(s)

            if i < len(s) and (s[i] == p[j] or p[j] == '?'):  # Match Single character
                return dfs(i + 1, j + 1)
            
            if p[j] == '*':
                return dfs(i, j + 1) or i < len(s) and dfs(i + 1, j)  # Match zero or one or more character
            
            return False

        return dfs(0, 0)

Campus Bikes
#tc - O(mnlog(mn))
#sc - O(mn)
class Solution:
    def assignBikes(self, workers: List[List[int]], bikes: List[List[int]]) -> List[int]:
        distances = []
        for i, worker in enumerate(workers):
            for j, bike in enumerate(bikes):
                dist = abs(worker[0] - bike[0]) + abs(worker[1] - bike[1])
                distances.append((dist, i, j))
                
        distances.sort(reverse=True)
        
        ret = [-1] * len(workers)
        workers_acquired = [False] * len(workers)
        bikes_acquired = [False] * len(bikes)
        while distances:
            dist, worker_index, bike_index = distances.pop()
            if workers_acquired[worker_index]:
                continue
            if bikes_acquired[bike_index]:
                continue
            ret[worker_index] = bike_index
            workers_acquired[worker_index] = True
            bikes_acquired[bike_index] = True
            
        return ret
