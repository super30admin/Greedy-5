class Solution {
    public int[] assignBikes(int[][] workers, int[][] bikes) {
        
        //Distance mapped to (worker,bike)
        //1--->[(0,0),(1,0)]
        // worker 0 and bike 0 has distance of 1 and worker 1 and bike 0 has a distance of 1
        TreeMap<Integer,List<int[]>> map = new TreeMap<>();
        
        for(int i =0;i < workers.length;i++){
            for(int j =0;j < bikes.length;j++){
                int dist = calcDist(workers[i],bikes[j]);
                
                if(!map.containsKey(dist))
                    map.put(dist,new ArrayList<>());
                
                map.get(dist).add(new int[]{i,j});
            }
        }
        
        
        int[] result = new int[workers.length];
        Arrays.fill(result,-1);
        
        boolean[] assignBikes = new boolean[bikes.length];
        int count =0;
        for(Integer dis : map.keySet()){
            List<int[]> workBike = map.get(dis);
            for(int[] wb : workBike){
                int worker = wb[0];
                int bike =   wb[1];
                if(result[worker] == -1 && !assignBikes[bike]){
                    result[worker] = bike; //assign this bike to the worker
                    assignBikes[bike] = true;
                    count++;
                }
                if(count == workers.length)
                    return result;
            }
        }
        return result;
    }
    
    private int calcDist(int[] workers,int[] bikes){
        return Math.abs(workers[0]-bikes[0]) + Math.abs(workers[1]-bikes[1]);
    }
}